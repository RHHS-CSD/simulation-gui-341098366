/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conway.s.game.of.life;

import static java.awt.Color.*;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.*;
import utils.CardSwitcher;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author michael.roy-diclemen
 */
public class EndPanel extends javax.swing.JPanel implements MouseListener {
    public static final String CARD_NAME = "end";
    CardSwitcher switcher;
    Timer animTimer;
    ConwayCopy c = new ConwayCopy();
    Random rn = new Random();
    int[][] cells = new int[22][22];
    int[][] cellsCopy = null;
    int[][] cellNeighbours = null;
    int neighbourCount=0;
    boolean specialCells=true;
    int generation =0;
    int sequence = 0;
    int liveCells = 0;
    /**
     * Creates new form EndPanel
     */
    public EndPanel(CardSwitcher p) {
        
        initComponents();


        // tell the program we want to listen to the mouse
        addMouseListener(this);
        //tells us the panel that controls this one
        switcher = p;
        //create and start a Timer for animation
        animTimer = new Timer(1500, new AnimTimerTick());
        c.assignRandomStates(cells, rn, specialCells);
        cellsCopy = c.copyArray(cells);
        cellNeighbours = c.copyArray(cells);
        
    }
    
    
    
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //display the cell grid
        for (int i=1; i<cells.length-1;i++){
            for (int j=1;j<cells.length-1;j++){
                switch (cells[i][j]){
                    case 0: 
                        g.setColor(WHITE);
                        break;
                    case 1:
                        g.setColor(RED);
                        break;
                    case 2:
                        g.setColor(BLACK);
                        break;
                    case 3:
                        g.setColor(YELLOW);
                        break;
                }
                g.fillRect(200 + i * 25, j * 25, 25, 25);
                //outline grid
                g.setColor(BLACK);
                g.drawRect(200 + i*25, j*25, 25, 25);

            }
        }

        

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        againButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jSlider2 = new javax.swing.JSlider();
        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        againButton.setText("Reset");
        againButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                againButtonActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(1250);
        jSlider1.setValue(0);

        jTextField1.setText("1500");

        jTextField2.setText("Generation: ");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("Live Cells: ");

        jSlider2.setMaximum(20);
        jSlider2.setMinimum(5);
        jSlider2.setValue(5);

        jTextField4.setText("0000000");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Grid Size");

        jLabel2.setText("Speed");

        jButton1.setText("Blinker");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Blinker v2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Glider");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Start");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Pause");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Change Size");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(againButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(jTextField3)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap(519, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(againButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(10, 10, 10)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void againButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_againButtonActionPerformed
        //reset the grid and go back to intro panel
        animTimer.stop();
        specialCells = true;
        c.assignRandomStates(cells, rn, specialCells);
        cellsCopy = c.copyArray(cells);
        cellNeighbours = c.copyArray(cells);
        switcher.switchToCard(IntroPanel.CARD_NAME);
        generation = 0;

    }//GEN-LAST:event_againButtonActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        animTimer.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        animTimer.stop();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        sequence = 3;
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sequence =1;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        sequence = 2;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        sequence = 4;
    }//GEN-LAST:event_jButton6ActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton againButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
/**
     * This event captures a click which is defined as pressing and releasing in
     * the same area
     *
     * @param me
     */
    
    
    public void mouseClicked(MouseEvent me) {
        System.out.println("Click: " + me.getX() + ":" + me.getY());
//        g.fillRect(200 + i * 25, j * 25, 25, 25);
        
    }

    /**
     * When the mountain is pressed
     *
     * @param me
     */
    public void mousePressed(MouseEvent me) {
        System.out.println("Press: " + me.getX() + ":" + me.getY());
    }

    /**
     * When the mouse button is released
     *
     * @param me
     */
    public void mouseReleased(MouseEvent me) {
        //change state of a cell when mouse click is released off a certain square
        System.out.println("Release: " + me.getX() + ":" + me.getY());
        int x = (me.getX() - 200) / 25;
        int y = (me.getY() / 25);
        System.out.println(x + "" + y);
        if (cells[x][y] == 0) {
            cells[x][y] = 1;
        }
        else {
            cells[x][y] = 0;
        }
        cellsCopy = c.copyArray(cells);
        cellNeighbours = c.copyArray(cells);
        
    }

    /**
     * When the mouse enters the area
     *
     * @param me
     */
    public void mouseEntered(MouseEvent me) {
        System.out.println("Enter: " + me.getX() + ":" + me.getY());
    }

    /**
     * When the mouse exits the panel
     *
     * @param me
     */
    public void mouseExited(MouseEvent me) {
        System.out.println("Exit: " + me.getX() + ":" + me.getY());
    }
    /**
     * Everything inside this actionPerformed will happen every time the
     * animation timer clicks.
     */
    private class AnimTimerTick implements ActionListener {

        public void actionPerformed(ActionEvent ae) {
            //the stuff we want to change every clock tick
            //force redraw
            repaint();
            //count generation
            generation = generation+1;
            //set textFields to reflect value of sliders
            jTextField2.setText(Integer.toString(generation));
            if (!jSlider1.getValueIsAdjusting()) {
                jTextField1.setText(String.valueOf(1500 - jSlider1.getValue()));
            }
            if (!jSlider2.getValueIsAdjusting()) {
                jTextField4.setText(String.valueOf(jSlider2.getValue()));
            }
            //check # of live cells
            liveCells = 0;
            liveCells = c.countLive(cells);
            //display number of live cells
            jTextField3.setText("Live Cells: "+Integer.toString(liveCells));
            switch (sequence){
                //Common sequence (Blinker)
                case 1:
                    cells = c.reset(cells);
                    cells = c.sequenceOne(cells);
                    sequence = 0;
                    cellsCopy = c.copyArray(cells);
                    cellNeighbours = c.copyArray(cells);
                    specialCells = false;
                    generation=0;       
                    break;
                //Common sequence (Blinker v2)
                case 2:
                    cells = c.reset(cells);
                    cells = c.sequenceTwo(cells);
                    sequence = 0;
                    cellsCopy = c.copyArray(cells);
                    cellNeighbours = c.copyArray(cells);
                    specialCells = false;
                    generation=0;
                    break;
                //Common sequence (Glider)
                case 3:
                    cells=c.reset(cells);
                    cells = c.sequenceThree(cells);
                    sequence = 0;
                    cellsCopy = c.copyArray(cells);
                    cellNeighbours = c.copyArray(cells);
                    specialCells = false;
                    generation=0;
                    break;
                //Changing the size of the grid and resetting the grid
                case 4:
                    cells=c.reset(cells);
                    for (int i = 1; i <= jSlider2.getValue(); i++) {
                        for (int j = 1; j <= jSlider2.getValue(); j++) {
                            switch (rn.nextInt(60)) {
                                case 0:
                                    //special cell (Bomb)
                                    cells[i][j] = 2;
                                    break;
                                case 1:
                                    //special cell (Healer)
                                    cells[i][j] = 3;
                                    break;
                                default:
                                    cells[i][j] = rn.nextInt(2);
                                    break;
                            }
                        }
                    }
                    sequence = 0;
                    cellsCopy = c.copyArray(cells);
                    cellNeighbours = c.copyArray(cells);
                    specialCells = true;
                    generation=0;
                    break;
                default:
                    cellNeighbours = c.liveNeighbours(cells, cellNeighbours, neighbourCount);
                    //check to see which cells to get rid
                    c.kill(cells, cellsCopy, cellNeighbours, rn, specialCells);
                    //only use special cells when random start
                    if (specialCells == true){
                        c.bomb(cells, cellsCopy);
                        c.heal(cells, cellsCopy);
                    }
                    //reset cells array
                    cells = c.copyArray(cellsCopy);
                    c.border(cells);
                    
                    break;
            }
            
            animTimer.stop();
            animTimer = new Timer(1500 - jSlider1.getValue(), new AnimTimerTick());
            animTimer.start();
        }
    }
}
    
